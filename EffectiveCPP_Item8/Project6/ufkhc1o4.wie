// Include standard headers
#define GLM_FORCE_RADIANS
////Memory Leak
#include <stdlib.h>
//#include "vld.h"
//#define _DEBUG

#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>

class Polymorphic {virtual void member(){}};
class classWithException{

public:
	classWithException():pb(0),iTest(0),closeBool(false){
		pb=0;
		std::cout<<"classWithException was created"<<std::endl;
	};

	~classWithException(){
		if(!closeBool){
			try{
			
				typeid(pb);
				//std::cout<<typeid(pb)<<std::endl;
				std::cout<<"Try destructor"<<std::endl;
				throw 10;
			}
			// Terminating programm - avoid problems and unexpected behaviour afterwards
			catch(...){
				std::cout<<"Exception in destructor occured"<<std::endl;
				std::system("Pause");
				//std::abort(); 
			}
			std::cout<<"classWithException was destroyed"<<std::endl;
		}
	};

	void close(){
		if(!closeBool){
			try{
				std::cout<<"Call Close"<<std::endl;
				closeBool=true;
				throw 42;
			}
			// Swallow Strategy - Do nothing but protocol exception
			catch(...){
				std::cout << "Exception occured during closing" << std::endl;
			}
		}
	};
private:
	Polymorphic * pb;
	// Resource Management - Check if the something is already closed if not than force it to close in the destructor
	bool closeBool;
	int iTest;
};
int main(void){
	classWithException* exceptionObject = new classWithException;
	exceptionObject->close();

	classWithException* exceptionObject2 = new classWithException;
	classWithException* exceptionObject3;


	std::vector<int> *testVec(0);

	std::vector<classWithException*> *testVec(0);
	testVec->push_back(exceptionObject3);
	delete testVec; // C++ does not allow excpetions in the destructor


	//delete exceptionObject;
	//delete exceptionObject2;
	//delete exceptionObject3;

	


	system("Pause");
	return 0;
}